"""
Simple Report Generator for ThreatLightHouse

This module provides a very basic report generation capability without 
any external dependencies beyond the standard library.

It's meant to be used as a fallback if the main PDF generator fails.
"""
import os
import json
import tempfile
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_text_report(report_data):
    """
    Generate a simple text-based report
    
    Args:
        report_data (dict): The report data
        
    Returns:
        str: The report content as text
    """
    try:
        # Get report type
        report_type = report_data.get("type", "unknown")
        target = report_data.get("target", "Unknown target")
        status = report_data.get("status", "unknown")
        scan_id = report_data.get("scan_id", "unknown")
        created_at = report_data.get("created_at", datetime.now().isoformat())
        
        # Format date
        try:
            dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            formatted_date = dt.strftime("%Y-%m-%d %H:%M:%S UTC")
        except:
            formatted_date = created_at
        
        # Get details
        details = report_data.get("details", {})
        if isinstance(details, str):
            try:
                details = json.loads(details)
            except:
                details = {}
                
        # Generate report header
        lines = [
            "=======================================",
            "         THREATLIGHTHOUSE REPORT       ",
            "=======================================",
            "",
            f"Report Type: {report_type.upper()}",
            f"Target: {target}",
            f"Status: {status.upper()}",
            f"Scan ID: {scan_id}",
            f"Date: {formatted_date}",
            "",
            "---------------------------------------",
            ""
        ]
        
        # Generate report body based on type
        if report_type == "file":
            lines.extend(generate_file_report_content(details))
        elif report_type == "url":
            lines.extend(generate_url_report_content(details))
        elif report_type == "port":
            lines.extend(generate_port_report_content(details))
        else:
            lines.append("Unknown report type")
            
        # Add footer
        lines.extend([
            "",
            "---------------------------------------",
            f"Generated by ThreatLightHouse on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "This report is for informational purposes only."
        ])
        
        return "\n".join(lines)
    
    except Exception as e:
        logger.error(f"Error generating text report: {e}")
        return "Error generating report."

def generate_file_report_content(details):
    """Generate content for file scan report"""
    lines = []
    
    # Add detection information
    detection_rate = details.get("detection_rate", "0/0")
    lines.append(f"Detection Rate: {detection_rate}")
    lines.append("")
    
    # Add detections
    detections = details.get("detections", [])
    if detections:
        lines.append("DETECTIONS:")
        lines.append("----------")
        for detection in detections:
            name = detection.get("name", "Unknown")
            threat_level = detection.get("threat_level", "unknown")
            description = detection.get("description", "No description available")
            lines.append(f"- {name} ({threat_level}): {description}")
    else:
        lines.append("No threats detected.")
        
    return lines

def generate_url_report_content(details):
    """Generate content for URL scan report"""
    lines = []
    
    # Add risk level information
    risk_level = details.get("risk_level", "unknown")
    lines.append(f"Risk Level: {risk_level.upper()}")
    lines.append("")
    
    # Add detection statistics
    detection_stats = details.get("detection_stats", {})
    if detection_stats:
        lines.append("DETECTION STATISTICS:")
        lines.append("-------------------")
        lines.append(f"Malicious: {detection_stats.get('malicious', 0)}")
        lines.append(f"Suspicious: {detection_stats.get('suspicious', 0)}")
        lines.append(f"Harmless: {detection_stats.get('harmless', 0)}")
        lines.append("")
    
    # Add categories
    categories = details.get("categories", [])
    if categories:
        lines.append("CATEGORIES:")
        lines.append("----------")
        for category in categories:
            lines.append(f"- {category}")
    else:
        lines.append("No suspicious categories detected.")
        
    return lines

def generate_port_report_content(details):
    """Generate content for port scan report"""
    lines = []
    
    # Add port scan information
    host = details.get("host", "unknown")
    ports_scanned = details.get("ports_scanned", "unknown")
    lines.append(f"Host: {host}")
    lines.append(f"Ports Scanned: {ports_scanned}")
    lines.append("")
    
    # Add open ports
    open_ports = details.get("open_ports", [])
    if open_ports:
        lines.append("OPEN PORTS:")
        lines.append("----------")
        lines.append(f"{'PORT':<10} {'SERVICE':<20} {'STATE':<10} {'RISK'}")
        lines.append(f"{'-'*10} {'-'*20} {'-'*10} {'-'*10}")
        for port in open_ports:
            port_num = str(port.get("port", "N/A"))
            service = port.get("service", "unknown")
            state = port.get("state", "unknown")
            risk = port.get("risk", "Low")
            lines.append(f"{port_num:<10} {service[:20]:<20} {state:<10} {risk}")
    else:
        lines.append("No open ports were found in the specified range.")
        
    return lines

def generate_simple_report_file(report_data):
    """
    Generate a text file report
    
    Args:
        report_data (dict): The report data
        
    Returns:
        bytes: The report content as bytes
    """
    try:
        # Generate report content
        content = generate_text_report(report_data)
        
        # Convert string content to bytes directly (more reliable than temp files)
        return content.encode('utf-8')
        
    except Exception as e:
        logger.error(f"Error generating simple report file: {e}")
        return b"Error generating report."
